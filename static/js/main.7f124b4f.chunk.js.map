{"version":3,"sources":["components/Form.js","components/ImageDisplay.js","components/Loader.js","containers/App.js","serviceWorker.js","index.js"],"names":["Form","props","className","style","width","type","placeholder","onChange","textChange","value","name","selectedChange","id","onClick","clicked","ImageDisplay","prop","src","url","alt","Loader","App","event","new_url","concat","state","localeCompare","URL","revokeObjectURL","setState","loading","fetch","then","response","blob","blobData","fetchedUrl","createObjectURL","selectionChange","e","target","textChanged","this","color","fontFamily","fontSize","fontStyle","fontWeight","paddingTop","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f124b4f.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport \"./Forms.css\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <Fragment>\r\n      <div className=\"tl pt2\">\r\n        <span className=\"tl f3\">Enter your name:</span>\r\n        <input\r\n          className=\"f4 inputbox\"\r\n          style={{ width: \"100%\" }}\r\n          type=\"text\"\r\n          placeholder=\"e.g. Gauraang Kelkar\"\r\n          onChange={props.textChange}\r\n        />\r\n        <br />\r\n        <br />\r\n        <span className=\"tl f3\">Select the type:</span>\r\n        <br />\r\n        <input\r\n          type=\"radio\"\r\n          value=\"cat\"\r\n          name=\"type\"\r\n          onChange={props.selectedChange}\r\n        />\r\n        <span className=\"radiotext\">Cat </span> <br />\r\n        <input\r\n          type=\"radio\"\r\n          value=\"heads\"\r\n          name=\"type\"\r\n          onChange={props.selectedChange}\r\n        />\r\n        <span className=\"radiotext\">Disembodied Heads</span> <br />\r\n        <input\r\n          type=\"radio\"\r\n          value=\"human\"\r\n          name=\"type\"\r\n          onChange={props.selectedChange}\r\n        />\r\n        <span className=\"radiotext\">Human</span> <br />\r\n        <input\r\n          type=\"radio\"\r\n          value=\"monster\"\r\n          name=\"type\"\r\n          onChange={props.selectedChange}\r\n        />\r\n        <span className=\"radiotext\">Monster</span> <br />\r\n        <input\r\n          type=\"radio\"\r\n          id=\"robot\"\r\n          value=\"robot\"\r\n          name=\"type\"\r\n          onChange={props.selectedChange}\r\n        />\r\n        <span className=\"radiotext\">Robot</span>\r\n        <br />\r\n        <br />\r\n        <button\r\n          className=\"btn btn-primary\"\r\n          value=\"Submit\"\r\n          onClick={props.clicked}\r\n        >\r\n          Make It!\r\n        </button>\r\n      </div>\r\n      <div className=\"\"></div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst ImageDisplay = (prop) => {\r\n  return <img src={prop.url} alt=\" will be displayed here\" />;\r\n};\r\n\r\nexport default ImageDisplay;\r\n","import React from \"react\";\r\nimport \"./Loader.css\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <>\r\n      <div className=\"lds-ripple\">\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n      <div>Making the awwwwwsome you...!! ;)</div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { Component } from \"react\";\r\nimport \"tachyons\";\r\nimport Form from \"../components/Form\";\r\nimport ImageDisplay from \"../components/ImageDisplay\";\r\nimport Loader from \"../components/Loader\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./App.css\";\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      type: \"\",\r\n      url: \"https://www.robohash.org/1\",\r\n      name: \"\",\r\n      loading: false,\r\n    };\r\n  }\r\n\r\n  clicked = (event) => {\r\n    let new_url = \"https://www.robohash.org/\".concat(this.state.name);\r\n    if (this.state.type.localeCompare(\"cat\") === 0) {\r\n      new_url = new_url.concat(\"/set_set4\");\r\n    } else if (this.state.type.localeCompare(\"monster\") === 0) {\r\n      new_url = new_url.concat(\"/set_set2\");\r\n    } else if (this.state.type.localeCompare(\"heads\") === 0) {\r\n      new_url = new_url.concat(\"/set_set3\");\r\n    } else if (this.state.type.localeCompare(\"human\") === 0) {\r\n      new_url = new_url.concat(\"/set_set5\");\r\n    }\r\n    URL.revokeObjectURL(this.state.url);\r\n    this.setState({ url: new_url, loading: true });\r\n    fetch(new_url)\r\n      .then((response) => response.blob())\r\n      .then((blobData) => {\r\n        let fetchedUrl = URL.createObjectURL(blobData);\r\n        this.setState({ loading: false, url: fetchedUrl });\r\n      });\r\n  };\r\n\r\n  selectionChange = (e) => {\r\n    this.setState({ type: e.target.value });\r\n  };\r\n\r\n  textChanged = (e) => {\r\n    this.setState({ name: e.target.value });\r\n  };\r\n  render() {\r\n    const loading = this.state.loading;\r\n\r\n    //console.log(this.state.loading);\r\n    return (\r\n      <div className=\"container tc w-50\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <h1 className=\"f2 avatar mt4\">MakeMyAvatar</h1>\r\n            <p\r\n              style={{\r\n                color: \"#A31621\",\r\n                fontFamily: \"Fanwood Text, serif\",\r\n                fontSize: \"18px\",\r\n                fontStyle: \"italic\",\r\n                fontWeight: \"bold\",\r\n                paddingTop: \"5px\",\r\n              }}\r\n            >\r\n              Ever wondered how would your name affect your AVATAR image?\r\n              Well...check it out yourself! ;)\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"fl w-50 pa2 tc\">\r\n            {loading ? <Loader /> : <ImageDisplay url={this.state.url} />}\r\n          </div>\r\n          <div className=\"fl w-50 pa2 tc\">\r\n            <Form\r\n              clicked={this.clicked}\r\n              selectedChange={this.selectionChange}\r\n              textChange={this.textChanged}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <span className=\"tc\" style={{ fontFamily: \"Monotype Corsiva\" }}>\r\n              Robots lovingly delivered by{\" \"}\r\n              <a style={{ color: \"yellow\" }} href=\"https://www.robohash.org\">\r\n                Robohash.org\r\n              </a>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}